#!/usr/bin/env ruby
# frozen_string_literal: true

# Id$ nonnax 2021-11-19 10:15:08 +0800
require 'file/file_ext'
# require 'csv'
require 'df/df'
require 'file/filer'
require 'rubytools/numeric_ext' # auto pretty-print
require 'rubytools/ansi_color'
require_relative '../lib/cache'
require_relative '../lib/price_get'

def puts_diff(a, b, &block)
  # a & b are DF objects
  unless block&.call # returns a boolean
    puts b.to_s(width: 15)
    return
  end
  puts Time.now.strftime('%r')
  puts b.diff(a, prefix: '\\ ').to_s(width: 15)
  puts 'previous close'
  puts a.to_s(width: 15)
end

def file_exist!(path)
  File.exist?(path) || File.write(path, '')
  path
end

def make_path(ext)
  path=File.join('/tmp', [Time.now.strftime('%Y%m%d'), ext].join('.'))
  # file_exist!(path)
end

cache do
  require 'faraday'
  # dailyfile = make_path('txt')
  fstore = make_path('mar')

  mar, store = Filer.load(MarshalFile.new(fstore)){ [] }

  data = get
  DF
    .new(cols: data.first.size - 1) { data.prepend(header_keys) }
    .tap { |df| puts_diff(DF.new{ store.last }, df){ store.size.positive? } }
    .tap { |df| mar.write(store << df) }
    .to_s(width: 15)
    .then { |s| [Time.now.strftime('%c'), s].join("\n") }
end
